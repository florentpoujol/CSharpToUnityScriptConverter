v0.1


==================================================
OPTIONS
==================================================


- You can choose if the script convert the declaration of multile inline variables of the same type.
  In some case that may lead to some false positiv. If you are sure you don't have such thing is your script, don't tick the box.
  If you do let the conversion append, be advise that the conversion will be messed up if
  a value contains a coma or a semi colon.



==================================================
TAKE NOTES OF :
==================================================





==================================================
WHAT DOES NOT WORK (HAS NO EQUIVALENT) IN UNITYSCRIPT
==================================================


- Enums in UnityScript does not accepts negative values


- Keyword "params" in method parameters.
  They are left, so they pop errors in the Unity console
  The solution is to remove the "params" keyword from the method declaration,
  then wrap the parameters in an array in the method call.

C# :
	void Method( params int[] values ) {}

	Method( 1, 2 );
	Method( 1, 2, 3 );

	void Method( string firstParam, params int[] values ) {}

	Method( "", 1, 2 );
	Method( "", 1, 2, 3 );

UnityScript :
	function Method( values: int[] ) {}

	Method( [1, 2] );
	Method( [1, 2, 3] );

	function Method( firestParam: String, values: int[] ) {}

	Method( "", [1, 2] );
	Method( "", [1, 2, 3] );


- Keyword "ref" in method parameters (they are left, so that they pop errors)
  There are no easy way to pass a value type as reference in UnityScript, you will have to deal with it.


- "delegate" and "event" does not exists in UnityScript but can be simulated to some extends.

  You can't create custom-nammed delegate or callable as in C# or Boo but you can express specific method signatures as Boo does.
  ie :
  // in C#
  delegate string DelegateName(int arg);
  DelegateName variabmeName = Methodname;

  // in Boo
  CallableName as callable(int) as string
  CallableName variableName = Methodname

  // in UnityScript
  "Function" is a global callable type, you should be able to use it wherever you use a delegate in C#

  // but you can also be more specific :
  function(int): String
  function(String, boolean) // same as    function(String, boolean): void
  var variableName: function(int): String = MethodName;

  You also still have access to .Net's Action<> and Func<> generic delegates.


  Currently (as of v0.1), the converter convert every occurence of a delegate name in it's US conterpart.
  Every occurence of "DelegateName" would be replaced by "function(int)"


  Events does not exists, but they are just a specialized collection of method, something you can easily reproduce in UnityScript, while it require some code refactoring.

C# :
	delegate void FooBarMethod(int data);

	// the event that will store the methods
	event FooBarMethod foobarMethods;

	[...]

	// a method to be called when the event is thrown
	void AMethod( int param ) {}

	// registering methods
	foobarMethods += AMethod;

	// throwing an event
	foobarMethods( 1 );

UnityScript :
	// the event can be simulated by any kind of list
	var foobarMethodsList: List.<function(int)> = new List.<function(int)>();

	function foorbarMethods( param: int ) {
		for( var method: function(int) in foobarMethods ) {
			method( param );
		}
	}

	[...]

	// a method to be called when the event is thrown
	function AMethod( param: int ) {}

	// registering methods
	foobarMethodsList.Add( AMethod );

	// throwing an event
	foorbarMethods( 1 );


	Nothing is done by the converter, everything is left out in the code.


- I have found some [System.Serializable] over Enums, 
  but Enums can't inherit from System.Object


- "out" keyword.
  In UnityScript, it is not needed when calling a C# method.
  But there is no way in UnityScript to create such behavior in the method declaration.
  Remember that you can still use C# classes from UnityScript scripts if they (the C# scripts) are compiled first


- "abstract" keyword
  Abstract classes/methods does not exist in UnityScript.
  Abstract classes/methods are converted into regular classes/methods.


- In UnityScript, you can not have a method parameter nammed "get"


==================================================

==================================================

