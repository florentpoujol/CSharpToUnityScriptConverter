import UnityEngine;
import System.Collections;

interface Int1 {}
interface Int2 {}
interface Int3 {}

// CLASSES DECLARATION
public class TestInheritance extends MonoBehaviour {}
public class TestInterface implements Itruc {}
public class TestInterfaces implements Int1, Int2 {}
public class TestInterfaces2 implements Int1, Int2 , Int3 {}
public class aaTest extends MonoBehaviour implements  Int1 ,Int2 {

	// CONSTRUCTORS
	public function aaTest(string aTruc) {
super(aTruc);
		// struff there 1
	}

	public function aaTest() {
super();
		// struff there 2
	}

	public function aaTest() {
aaTest();
		// struff there 3
	}

	public function aaTest(string mahcin) 
	{
aaTest(aTruc);
		// struff there 4
	}


	// ATTRIBUTES
	@script HideInInspector
	@script RPC
	@script RequireComponent(Material)
	@script DrawGizmo(GizmoType.NotSelected | GizmoType.Pickable)
	@script AddComponentMenu("Transform/Follow Transform")
	@script ContextMenu("Do Something")
	@script MenuItem("MyMenu/Do Something")
	@script ExecuteInEditMode
	@script System.Serializable



	// VARIABLES

	// multiple variable declaration
	var aVar9: double= 3.5, aVar10, aVar11=5.0 ;
	var aVar1: String = "un ; var aVar2: espace",;
	var avar: Class = new Class(), avar2 = new Class (untruc);
	

	// VAR DECLARATION WITHOUT VALUE
	var avar: boolean;
	var avar: String;
	var avar: Dictionary.<String, boolean>;


	// VAR DECLARATION WITH VALUE
	var var1: String = "mach ; in";
	var var3: String = @'machin'+	' machin chose'	;
	var var4: boolean = false;
	var var6: float[] = [3.5, 0];
	var avar: double = Method (machin);
	var var7: Class = new Class (parma, param);

	
	// VAR DECLARATION IN FOREACH LOOP
	for (var avar: String in avars)
	for (var avar: KeyValuePair.<String, boolean> in dico)

	// PATCHING garbage correction
	import System.Collections.Generics;

	function Method(): String { return avar; }

	else avar = value;

	// CASTING


	// ARRAYS
	var avar: String[];
	var avar: String[] = new string[5];

	var avar: String[] = new string[] { "machin", "machin"};
	var avar: boolean[] = [ false, true];

	float[] avar = new float[] { 0.0,
		3.5,
		5};
	int[] avar = new int[] { 0,
		3,
		5};



	// FUNCTIONS
	public function ReturnVoid() {}

	private function ReturnString(bool testarg): String {}

	protected function ReturnBool(string arg1, float arg2): boolean {}

	public override function ToString(): String {
		return "ToString()";
	}

	function ACoroutine(bool isTrue): IEnumerator {
		if (isTrue) {
			yield return null
		}
		else {
			yield return new WaitForSeconds (3.5);
			// yield WaitForSeconds (3.5);
		}
		
	}



	// PROPERTIES
	var prop1: private int = 5;
	public int Prop1 { get; set; }

	var prop2: private int;
	public int Prop2 {
		get { return prop2*2; 
		}
	}

	var prop3: private string;
	public string Prop3 {
		set 
		{ 
			prop3 = value+" ";
		}
	}

	var prop4: private double;
	public double Prop4 {
		get { return prop4; }
		protected set {
			aVar9 = aVar10 + value;
		}
	}


	// Use this for initialization
	function Start() {
		
		var aVar2: string aVar1,;

		int aVar5, aVar6 , aVar7 ,aVar8;

		var aVar3: boolean=var aVar4: true ,;

		
	}


}

class AStruct extends System.ValueType {
	gbase.machin
	super.machin
}