using UnityEngine;
using System. Collections ;

interface Int1 {}
interface Int2 {}
interface Int3 {}

// CLASSES DECLARATION
public class TestInheritance : MonoBehaviour {}
public class TestInterface : Itruc {}
public class TestInterfaces : Int1 ,Int2 {}
public class TestInterfaces2 : Int1 ,Int2 , Int3 {}
public class aaTest : MonoBehaviour, Int1 ,Int2 {

	// CONSTRUCTORS
	public aaTest (string aTruc) 
	: base (aTruc) {
		// struff there 1
	}

	public aaTest () : base () {
		// struff there 2
	}

	public aaTest () 
	: this () {
		// struff there 3
	}

	public aaTest (string mahcin) : this (aTruc) 
	{
		// struff there 4
	}


	// ATTRIBUTES
	[HideInInspector]
	[RPC]
	[RequireComponent ( typeof(Material) )]
	[DrawGizmo (GizmoType.NotSelected | GizmoType.Pickable)]
	[AddComponentMenu("Transform/Follow Transform")]
	[ContextMenu ("Do Something")]
	[MenuItem ("MyMenu/Do Something")]
	[ExecuteInEditMode]
	[System.Serializable]



	// VARIABLES

	// multiple variable declaration
	double aVar9= 3.5f, aVar10, aVar11=5.0 ;
	string aVar1 = "un ; espace", aVar2;
	Class avar = new Class(), avar2 = new Class (untruc);
	

	// VAR DECLARATION WITHOUT VALUE
	private bool avar;
	private static string avar;
	static private Dictionary<string, bool> avar;


	// VAR DECLARATION WITH VALUE
	public string var1 = "mach ; in";
	public static string var3 = @'machin'+	' machin chose'	;
	static public bool var4 = false;
	protected float[] var6 = {3.5f, 0f};
	protected static double avar = Method (machin);
	static protected Class var7 = new Class (parma, param);

	
	// VAR DECLARATION IN FOREACH LOOP
	foreach (string avar in avars)
	foreach (KeyValuePair<string, bool> avar in dico)

	// PATCHING garbage correction
	import System. Collections . Generics;

	string Method() { return avar; }

	else
		avar = value;

	// CASTING
	string varCast1 = (string)DoMachin();


	// ARRAYS
	string[] avar;
	string[] avar = new string[5];

	string[] avar = new string[] { "machin", "machin"};
	bool[] avar = { false, true};

	float[] avar = new float[] { 0.0f,
		3.5f,
		5f};
	int[] avar = new int[] { 0,
		3,
		5};



	// FUNCTIONS
	public void ReturnVoid () {
		string _var = ReturnString (ref aBoolVar)
	}

	private string ReturnString (ref bool testarg) {}

	protected bool ReturnBool (string arg1, float arg2) {
		if (new Rect()) { // sould not be converted

		}
		else if (false) { // should not be converted

		}
	}

	public override string[] ToString () {
		return "ToString()";
	}

	IEnumerator ACoroutine (out bool isTrue) {
		if (isTrue) {
			yield return null;
		}
		else {
			yield return new WaitForSeconds (3.5f);
			// yield WaitForSeconds (3.5);
		}
		
	}



	// PROPERTIES
	private int prop1 = 5;
	public int Prop1 { get; set; }

	private int prop2;
	public int Prop2 {
		get { return prop2*2; 
		}
	}

	private string prop3;
	public string Prop3 {
		set 
		{ 
			prop3 = value+" ";
		}
	}

	private double prop4;
	public double Prop4 {
		get { return prop4; }
		protected set {
			aVar9 = aVar10 + value;
		}
	}


	// Use this for initialization
	void Start () {
		
		string aVar1, aVar2;

		int aVar5, aVar6 , aVar7 ,aVar8;

		bool aVar3=true , aVar4;

		
	}


}

struct AStruct
{
	gbase.machin
	base.machin
}